# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'face_recognition.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import tkinter
from tkinter import Frame, Tk, BOTH, Text, Menu, END
from tkinter.filedialog import Open, SaveAs

from model import create_model
import numpy as np
import os.path
import cv2
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import joblib

from align import AlignDlib
from sklearn.svm import LinearSVC
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton

import hinh
from nhom_ui import *
from tkinter import * 
from tkinter import messagebox

def load_image(path):
    img = cv2.imread(path, 1)
    # OpenCV loads images with color channels
    # in BGR order. So we need to reverse them
    return img[..., ::-1]


def align_image(img):
    return alignment.align(96, img, alignment.getLargestFaceBoundingBox(img),
                           landmarkIndices=AlignDlib.OUTER_EYES_AND_NOSE)


alignment = AlignDlib('models/shape_predictor_68_face_landmarks.dat')

nn4_small2_pretrained = create_model()
nn4_small2_pretrained.load_weights('weights/nn4.small2.v1.h5')

svc = joblib.load('svc.pkl')

mydict = ['BanDung','BanHieu','BanKhiem','BanNgan','BanNhu','BanPhat','BanPhuc','BanThanh',
'BanThoa','BanThuong','DucThuan','DucTien','GiaMinh','LeSok','MinhKhoi','NghiepNguyen',
'NgocThuyen','TanLoc','TanNhac','TranKhanh','TuanAnh','TuanThanh','VanSon']

def onOpen():
    global ftypes
    ftypes = [('Images', '*.jpg *.tif *.bmp *.gif *.png')]
    dlg = Open(filetypes=ftypes)
    fl = dlg.show()

    if fl != '':
        global img
        global imgin
        imgin = cv2.imread(fl, cv2.IMREAD_COLOR)
        img = imgin[..., ::-1]
        cv2.namedWindow("ImageIn", cv2.WINDOW_AUTOSIZE)
        #cv2.moveWindow("ImageIn", 200, 200)
        cv2.imshow("ImageIn", imgin)

def onRecognition():
    img_test = align_image(img)
    # scale RGB values to interval [0,1]
    img_test = (img_test / 255.).astype(np.float32)
    # obtain embedding vector for image
    embedded_test = nn4_small2_pretrained.predict(
        np.expand_dims(img_test, axis=0))[0]
    test_prediction = svc.predict([embedded_test])
    result = mydict[test_prediction[0]]
    # cv2.putText(imgin, result, (5, 15),
    #             cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255))
    # cv2.namedWindow("ImageIn", cv2.WINDOW_AUTOSIZE)
    # cv2.imshow("ImageIn", imgin)
    root = Tk()
    root.geometry("300x200")
    root.withdraw()
    messagebox.showinfo(title='Kết quả', message=result)
    root.mainloop() 

class Ui_MainWindow(object):
    def nhom(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow1()
        self.ui.setup(self.window)
        self.window.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(648, 564)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 651, 421))
        self.label.setStyleSheet("background-image: url(:/background/img/cong-nghe-nhan-dien-khuon-mat-1.jpg);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 450, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(onOpen)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(170, 450, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(onRecognition)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(490, 450, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(QCoreApplication.instance().quit)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(330, 450, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.nhom)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Open"))
        self.pushButton_2.setText(_translate("MainWindow", "Recognition"))
        self.pushButton_3.setText(_translate("MainWindow", "Exit"))
        self.pushButton_4.setText(_translate("MainWindow", "About Us"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
